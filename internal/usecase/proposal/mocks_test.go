// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package proposal_test is a generated GoMock package.
package proposal_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/costaconrado/services-csm/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockProposal is a mock of Proposal interface.
type MockProposal struct {
	ctrl     *gomock.Controller
	recorder *MockProposalMockRecorder
}

// MockProposalMockRecorder is the mock recorder for MockProposal.
type MockProposalMockRecorder struct {
	mock *MockProposal
}

// NewMockProposal creates a new mock instance.
func NewMockProposal(ctrl *gomock.Controller) *MockProposal {
	mock := &MockProposal{ctrl: ctrl}
	mock.recorder = &MockProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposal) EXPECT() *MockProposalMockRecorder {
	return m.recorder
}

// ChangeStage mocks base method.
func (m *MockProposal) ChangeStage(arg0 context.Context, arg1 entity.Proposal, arg2 entity.DealStage) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStage", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeStage indicates an expected call of ChangeStage.
func (mr *MockProposalMockRecorder) ChangeStage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStage", reflect.TypeOf((*MockProposal)(nil).ChangeStage), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockProposal) Create(arg0 context.Context, arg1 entity.Proposal) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProposalMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProposal)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockProposal) Get(arg0 context.Context, arg1 uint) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProposalMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProposal)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockProposal) List(arg0 context.Context, arg1 int) ([]entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProposalMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProposal)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockProposal) Update(arg0 context.Context, arg1 entity.Proposal) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProposalMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProposal)(nil).Update), arg0, arg1)
}

// MockProposalRepo is a mock of ProposalRepo interface.
type MockProposalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProposalRepoMockRecorder
}

// MockProposalRepoMockRecorder is the mock recorder for MockProposalRepo.
type MockProposalRepoMockRecorder struct {
	mock *MockProposalRepo
}

// NewMockProposalRepo creates a new mock instance.
func NewMockProposalRepo(ctrl *gomock.Controller) *MockProposalRepo {
	mock := &MockProposalRepo{ctrl: ctrl}
	mock.recorder = &MockProposalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalRepo) EXPECT() *MockProposalRepoMockRecorder {
	return m.recorder
}

// CreateProposal mocks base method.
func (m *MockProposalRepo) CreateProposal(arg0 context.Context, arg1 entity.Proposal) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposal", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposal indicates an expected call of CreateProposal.
func (mr *MockProposalRepoMockRecorder) CreateProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposal", reflect.TypeOf((*MockProposalRepo)(nil).CreateProposal), arg0, arg1)
}

// GetProposal mocks base method.
func (m *MockProposalRepo) GetProposal(arg0 context.Context, arg1 uint) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposal", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposal indicates an expected call of GetProposal.
func (mr *MockProposalRepoMockRecorder) GetProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposal", reflect.TypeOf((*MockProposalRepo)(nil).GetProposal), arg0, arg1)
}

// ListProposals mocks base method.
func (m *MockProposalRepo) ListProposals(arg0 context.Context, arg1 int) ([]entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProposals", arg0, arg1)
	ret0, _ := ret[0].([]entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProposals indicates an expected call of ListProposals.
func (mr *MockProposalRepoMockRecorder) ListProposals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProposals", reflect.TypeOf((*MockProposalRepo)(nil).ListProposals), arg0, arg1)
}

// UpdateProposal mocks base method.
func (m *MockProposalRepo) UpdateProposal(arg0 context.Context, arg1 entity.Proposal) (entity.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProposal", arg0, arg1)
	ret0, _ := ret[0].(entity.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProposal indicates an expected call of UpdateProposal.
func (mr *MockProposalRepoMockRecorder) UpdateProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProposal", reflect.TypeOf((*MockProposalRepo)(nil).UpdateProposal), arg0, arg1)
}
